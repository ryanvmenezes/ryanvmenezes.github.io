---
title: The Champions League draw, simulated
subhead: 'Or: How I learned to embrace (and simulate) semi-random playoffs'
author: Ryan Menezes
date: '2019-12-15'
draft: true
slug: the-champions-league-draw-simulated
categories: []
tags: []
# output:
#   blogdown::html_page:
#     toc: true
---

About a year ago, I had a thought that turned into a quick analysis, which I summarized in this tweet:

```{r echo=FALSE}
blogdown::shortcode('tweet', '1074556953190256640')
```

I wanted to expand on why this particular event piqued my curiousity and share the code that generated these numbers.

https://youtu.be/o_wmpUIAUTU?t=274

As someone who grew up watching a truly absurd amount of American sports, my dive into the world of European football has been eye-opening. It's not the sport itself that is foreign to me -- I've always been a casual fan of soccer -- but rather the structure around competition that I've found totally foreign.

<!-- Imagine Major League Baseball instituted a playoff series where each team hosts one game and the winner is decided by the total number of runs scored. I think this has a low chance of happening. But if it did, it surely would make the latter innings of every game meaningful. -->

<!-- But it occurred to me that the possible matchups in the UEFA Champions League draw are not all equally likely. The draw has two rules: Teams who were in the same group one round earlier can't be drawn against each other, and neither can teams from the same country. After the winners advance from this round, things get truly random, and you can get  -->

<!-- On a side note, I now find Wikipedia's use of a [bracket](https://en.wikipedia.org/wiki/2016%E2%80%9317_UEFA_Champions_League_knockout_phase#Bracket) to illustrate the knockout round very misleading. For years I stared at it thinking that group winners and runners-up were placed in a bracket  -->

# The code

```{r message=FALSE}
library(furrr)
library(tidyverse)
library(formattable)

set.seed(10) # for reproducibility
```

Create the data.

```{r}
teams = tibble(
  team = c(
    'psg--a--w--fra',
    'bayern--b--w--ger',
    'city--c--w--eng',
    'juve--d--w--ita',
    'liverpool--e--w--eng',
    'barca--f--w--esp',
    'leipzig--g--w--ger',
    'valencia--h--w--esp',
    'real--a--r--esp',
    'spurs--b--r--eng',
    'atalanta--c--r--ita',
    'atletico--d--r--esp',
    'napoli--e--r--ita',
    'dortmund--f--r--ger',
    'lyon--g--r--fra',
    'chelsea--h--r--eng'
  )
) %>% 
  separate(
    team,
    sep = '--',
    into = c('team', 'group', 'finish', 'country')
  )

teams
```

The actual process for the draw is very interesting.

```{r echo=FALSE}
blogdown::shortcode('youtube', 'iSR4PaAiHn4')
```

The process goes as follows:

1. Split the teams into the winners and the runners-up
2. Add a matchup number between 1 and 8 to each winner
3. Add a random matchup number between 1 and 8 to each runner-up
4. Join the winners and runners-up
5. Check that the matchups meet the rules. Is there a matchup with two teams from the same country? Two teams from the same group? **If the answer to either question is yes, start over from step 3.**

```{r}
creatematchups = function(teams) {
  winners = teams %>%
    filter(finish == 'w') %>% 
    select(-finish) %>% 
    mutate(matchup = row_number())
  
  runnersup = teams %>%
    filter(finish == 'r') %>% 
    select(-finish)
  
  valid = FALSE
  while(!valid) {
    runnersup = runnersup %>% mutate(matchup = sample(8))
    runnersup
    
    matchups = winners %>% inner_join(
      runnersup,
      by = 'matchup',
      suffix = c('.w', '.r')
    )
    
    valid = (matchups %>% 
      filter(group.w == group.r | country.w == country.r) %>% 
      nrow()) == 0
  }
  return(matchups)
}
```

Run it once.

```{r}
creatematchups(teams)
```

```{r include=FALSE}
# library(here)
# outpath = file.path(here(), 'data', 'cl-sims.rds')
# write_rds(simsf, outpath)
# simsf <- read_rds(outpath)
```


```{r, futuresim, cache=TRUE, autodep=TRUE}
NUM_SIMS = 10000
plan(multisession)
system.time(simsf <- future_map(1:NUM_SIMS, ~creatematchups(teams)))
```

```{r}
simresults = bind_rows(simsf)
head(simresults, 16)
```

```{r}
matchups = simresults %>% 
  group_by(team.w, group.w, team.r, group.r) %>% 
  count() %>% 
  ungroup() %>% 
  mutate(
    drawn = case_when(
      team.w == 'barca' & team.r == 'napoli' ~ TRUE,
      team.w == 'liverpool' & team.r == 'atletico' ~ TRUE,
      team.w == 'psg' & team.r == 'dortmund' ~ TRUE,
      team.w == 'valencia' & team.r == 'atalanta' ~ TRUE,
      team.w == 'leipzig' & team.r == 'spurs' ~ TRUE,
      team.w == 'bayern' & team.r == 'chelsea' ~ TRUE,
      team.w == 'juve' & team.r == 'lyon' ~ TRUE,
      team.w == 'city' & team.r == 'real' ~ TRUE,
      TRUE ~ FALSE
    ),
    matchup = str_c(team.w, team.r, sep = '-'),
    matchup = fct_reorder(matchup, n),
    team.w = fct_reorder(team.w, rank(group.w)),
    team.r = fct_reorder(team.r, rank(group.r))
  )

head(matchups)
```

```{r}
matchups %>% 
  ggplot(aes(team.w, team.r)) +
  geom_point(data = matchups %>% filter(drawn), size = 12, color = '#D55E00') +
  geom_point(aes(color = n), size = 10) +
  geom_text(aes(label = round(n / NUM_SIMS * 100, 1)), size = 3, color = 'white') +
  scale_color_gradient2() +
  ylab('Group Runners-up') +
  xlab('Group Winners') +
  ggtitle('Probabilty of every possible Champions League Round of 16 matchup') +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r, fig.height=6}
matchups %>% 
  ggplot(aes(x = matchup, y = n, fill = drawn)) +
  geom_col() +
  geom_text(aes(x = matchup, y = 1, label = matchup), hjust = 0, size = 2.7) +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "none"
  ) +
  scale_fill_manual(
    name = NULL,
    values = c("#B0B0B0D0", "#D55E00D0")
  ) +
  ylab('Simulations (out of 10,000) in which matchup appeared') +
  coord_flip()
```

Tada.
